// <auto-generated />
using System;
using Inventory.Infrastructure.Persistence.StoredModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Inventory.Infrastructure.Migrations
{
    [DbContext(typeof(StoredDbContext))]
    [Migration("20250516051154_InitialStructure")]
    partial class InitialStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Infrastructure.Persistence.StoredModel.Entities.ItemStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("itemId");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("itemName");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.Property<decimal>("UnitaryCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unitaryCost");

                    b.HasKey("Id");

                    b.ToTable("item");
                });

            modelBuilder.Entity("Inventory.Infrastructure.Persistence.StoredModel.Entities.TransactionItemStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("transactionItemId");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("itemId");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("subTotal");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("transactionId");

                    b.Property<decimal>("UnitaryCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unitaryCost");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TransactionId");

                    b.ToTable("transactionItem");
                });

            modelBuilder.Entity("Inventory.Infrastructure.Persistence.StoredModel.Entities.TransactionStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("transactionId");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelDate");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completedDate");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("totalCost");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("transactionType");

                    b.Property<Guid>("UserCreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("userCreatorId");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatorId");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("Inventory.Infrastructure.Persistence.StoredModel.Entities.UserStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("fullName");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Joseco.Outbox.Contracts.Model.OutboxMessage<Joseco.DDD.Core.Abstractions.DomainEvent>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outboxId");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean")
                        .HasColumnName("processed");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processedOn");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outboxMessage", "outbox");
                });

            modelBuilder.Entity("Inventory.Infrastructure.Persistence.StoredModel.Entities.TransactionItemStoredModel", b =>
                {
                    b.HasOne("Inventory.Infrastructure.Persistence.StoredModel.Entities.ItemStoredModel", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Infrastructure.Persistence.StoredModel.Entities.TransactionStoredModel", "Transaction")
                        .WithMany("Items")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Inventory.Infrastructure.Persistence.StoredModel.Entities.TransactionStoredModel", b =>
                {
                    b.HasOne("Inventory.Infrastructure.Persistence.StoredModel.Entities.UserStoredModel", "UserCreator")
                        .WithMany()
                        .HasForeignKey("UserCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreator");
                });

            modelBuilder.Entity("Inventory.Infrastructure.Persistence.StoredModel.Entities.TransactionStoredModel", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
