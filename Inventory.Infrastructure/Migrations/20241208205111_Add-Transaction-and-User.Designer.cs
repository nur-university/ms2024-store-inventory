// <auto-generated />
using System;
using Inventory.Infrastructure.StoredModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inventory.Infrastructure.Migrations
{
    [DbContext(typeof(StoredDbContext))]
    [Migration("20241208205111_Add-Transaction-and-User")]
    partial class AddTransactionandUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Infrastructure.StoredModel.Entities.ItemStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("itemId");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("itemName");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<decimal>("UnitaryCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unitaryCost");

                    b.HasKey("Id");

                    b.ToTable("item");
                });

            modelBuilder.Entity("Inventory.Infrastructure.StoredModel.Entities.TransactionItemStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("transactionItemId");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("itemId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("subTotal");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("transactionId");

                    b.Property<decimal>("UnitaryCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unitaryCost");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TransactionId");

                    b.ToTable("transactionItem");
                });

            modelBuilder.Entity("Inventory.Infrastructure.StoredModel.Entities.TransactionStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("transactionId");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("cancelDate");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("completedDate");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creationDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("totalCost");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("transactionType");

                    b.Property<Guid>("UserCreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userCreatorId");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatorId");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("Inventory.Infrastructure.StoredModel.Entities.UserStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fullName");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Inventory.Infrastructure.StoredModel.Entities.TransactionItemStoredModel", b =>
                {
                    b.HasOne("Inventory.Infrastructure.StoredModel.Entities.ItemStoredModel", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Infrastructure.StoredModel.Entities.TransactionStoredModel", "Transaction")
                        .WithMany("Items")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Inventory.Infrastructure.StoredModel.Entities.TransactionStoredModel", b =>
                {
                    b.HasOne("Inventory.Infrastructure.StoredModel.Entities.UserStoredModel", "UserCreator")
                        .WithMany()
                        .HasForeignKey("UserCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreator");
                });

            modelBuilder.Entity("Inventory.Infrastructure.StoredModel.Entities.TransactionStoredModel", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
